//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ThermalConfigBean")]
pub struct Model {
    #[sea_orm(
        column_name = "filterName",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub filter_name: String,
    #[sea_orm(column_type = "Text")]
    pub version: String,
    #[sea_orm(column_name = "ambientLevel", column_type = "Text", nullable)]
    pub ambient_level: Option<String>,
    #[sea_orm(column_name = "featureConfigItem", column_type = "Text", nullable)]
    pub feature_config_item: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub feature: Option<String>,
    #[sea_orm(column_name = "globalPolicy", column_type = "Text", nullable)]
    pub global_policy: Option<String>,
    #[sea_orm(column_name = "safetyTest", column_type = "Text", nullable)]
    pub safety_test: Option<String>,
    #[sea_orm(column_name = "screenOff", column_type = "Text", nullable)]
    pub screen_off: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub specific: Option<String>,
    #[sea_orm(column_name = "specificScene", column_type = "Text", nullable)]
    pub specific_scene: Option<String>,
    #[sea_orm(column_name = "specificEnv", column_type = "Text", nullable)]
    pub specific_env: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub complexscene: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub scene: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub category: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub mdefault: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub resv1: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub resv2: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub resv3: Option<String>,
    pub update_time: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
